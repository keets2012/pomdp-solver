package pomdp;


import pomdp.algorithms.ValueIteration;
import pomdp.algorithms.pointbased.GenericValueIteration;
import pomdp.environments.FieldVisionRockSample;
import pomdp.environments.Logistics;
import pomdp.environments.ModifiedRockSample;
import pomdp.environments.NetworkManagement;
import pomdp.environments.POMDP;
import pomdp.environments.FactoredPOMDP.BeliefType;
import pomdp.utilities.ExecutionProperties;

import pomdp.utilities.Logger;


public class POMDPExperiment {

	public static void main( String[] args ){
		
		/* set defaults */
		double dTargetADR = 10000.0;
		//String sModelName = "hallway";
		String sExperimentType = "Basic";
		//String sModelName = "underwaterNav";
		String sModelName = "tagAvoid";
		String collectionName = "HSVICollection";
		String orderingName = "FullBackup";
		boolean useBlindPolicy = false;
		/* target Running time (in seconds), if we want to stop at a specified time */
		int maxRunningTime = 50;
		int numEvaluations = 25;
		int numIndependentTrials = 1;
		int numBeliefsPerStep = 10;
		int numBackupIterations = 1;
		
		if ((args.length != 0) && (args.length < 9))
		{
			System.out.println("Format is: POMDPExperiment TYPE MODEL_NAME RUNNING_TIME NUMBER_EVALUATIONS NUMBER_TRIALS COLLECTION_ALGORITHM ORDERING_ALGORITHM NUMBER_BELIEFS_STEP NUMBER_BACKUP_ITERATIONS");
			return;
		}

		if (args.length >= 9)
		{
			sExperimentType = args[0];
			sModelName = args[1];
			maxRunningTime = Integer.parseInt(args[2]);
			numEvaluations = Integer.parseInt(args[3]);			
			numIndependentTrials = Integer.parseInt(args[4]);		
			collectionName = args[5];
			orderingName = args[6];			
			numBeliefsPerStep = Integer.parseInt(args[7]);
			numBackupIterations = Integer.parseInt(args[8]);
		}
		
		if (args.length > 9)
			if (Boolean.parseBoolean(args[9]))
				useBlindPolicy = true;
		
		
		String output = "logs/" + sExperimentType + "/" + sModelName + "/"+ sModelName + "_" + collectionName + "_" + orderingName + "_" + numBeliefsPerStep + "_" + numBackupIterations;

		if (useBlindPolicy)
			output += "_blind";
		
		output += ".txt";
		
		
		System.out.println("Model:" + sModelName);
		System.out.println("Collection Algorithm:" + collectionName);
		System.out.println("Backup Ordering Algorithm:" + orderingName);
		System.out.println("# of Independent Trials: " + numIndependentTrials);
		System.out.println("# of Beliefs Collected Per Step: " + numBeliefsPerStep);	
		System.out.println("# of Backup Iterations Per Step: " + numBackupIterations);
		System.out.println("Output File: "+ output);
		try
		{
			Logger.getInstance().setOutputStream(output);
		}
		catch( Exception e ){
			System.err.println( e );
		}



		/* iterate through independent trials */
		for (int trial = 0; trial < numIndependentTrials; trial++)
		{
			POMDP pomdp = null;


			/* load the POMDP model */
			try
			{
				if( sModelName.equals( "RockSample5" ) ){
					int cX = 5, cY = 5, cRocks = 5, halfSensorDistance = 4;
					pomdp = new ModifiedRockSample( cX, cY ,cRocks, halfSensorDistance, BeliefType.Flat );
				}
				else if( sModelName.equals( "RockSample5-99" ) ){
					int cX = 5, cY = 5, cRocks = 5, halfSensorDistance = 4;
					pomdp = new ModifiedRockSample( cX, cY ,cRocks, halfSensorDistance, BeliefType.Flat, .99);
				}
				else if( sModelName.equals( "RockSample7" ) ){
					int cX = 7, cY = 7, cRocks = 8, halfSensorDistance = 20;
					pomdp = new ModifiedRockSample( cX, cY ,cRocks, halfSensorDistance, BeliefType.Flat );
				}
				else if( sModelName.equals( "RockSample7-99" ) ){
					int cX = 7, cY = 7, cRocks = 8, halfSensorDistance = 20;
					pomdp = new ModifiedRockSample( cX, cY ,cRocks, halfSensorDistance, BeliefType.Flat, .99);
				}
				else if( sModelName.equals( "FieldVisionRockSample5" ) ){
					int cX = 5, cY = 5, cRocks = 5, halfSensorDistance = 4;
					pomdp = new FieldVisionRockSample( cX, cY ,cRocks, halfSensorDistance, BeliefType.Flat );
				}
				else if( sModelName.equals( "FieldVisionRockSample7" ) ){
					int cX = 7, cY = 7, cRocks = 8, halfSensorDistance = 20;
					pomdp = new FieldVisionRockSample( cX, cY ,cRocks, halfSensorDistance, BeliefType.Flat );
				}
				/* flat POMDP, will load from file */
				else
				{
					pomdp = new POMDP();
					pomdp.load( ExecutionProperties.getPath() + sModelName + ".POMDP" );
					System.out.println("max is " + pomdp.getMaxR() + " min is "+ pomdp.getMinR());
				}
			}
			catch (Exception e)
			{
				System.out.println( e );
				e.printStackTrace();
				System.exit( 0 );
			}

			System.out.println("POMDP is " + pomdp.getName());
			


			ValueIteration viAlgorithm = new GenericValueIteration(pomdp, collectionName, orderingName, numBeliefsPerStep, numBackupIterations, useBlindPolicy);
			int cMaxIterations = 100000;
			try
			{
				/* run POMDP solver */
				viAlgorithm.valueIteration(cMaxIterations, ExecutionProperties.getEpsilon(), dTargetADR, maxRunningTime, numEvaluations);
				Logger.getInstance().log( "----------------");
			}

			catch( Exception e ){
				System.out.println( e );
				e.printStackTrace();
			} 
			catch( Error err ){
				Runtime rtRuntime = Runtime.getRuntime();
				System.out.println( "POMDPSolver: " + err +
						" allocated " + ( rtRuntime.totalMemory() - rtRuntime.freeMemory() ) / 1000000 +
						" free " + rtRuntime.freeMemory() / 1000000 +
						" max " + rtRuntime.maxMemory() / 1000000 );
				System.out.print( "Stack trace: " );
				err.printStackTrace();
			}
		}
	}
}
